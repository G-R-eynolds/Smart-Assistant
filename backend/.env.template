# ================================
# Smart Assistant Backend Configuration
# ================================
# Copy this file to .env and fill in your actual values

# ================================
# Server Configuration
# ================================
HOST=0.0.0.0
PORT=8080

# ================================
# Database Configuration
# ================================
DATABASE_URL=sqlite:///data/webui.db

# ================================
# API Configuration
# ================================
ENABLE_OPENAI_API=true
ENABLE_OLLAMA_API=false
OPENAI_API_BASE_URL=https://generativelanguage.googleapis.com/v1beta/openai/
OPENAI_API_KEY=your_openai_api_key_here
OLLAMA_BASE_URL=http://localhost:11434

# ================================
# Google Gemini AI Configuration
# ================================
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-1.5-flash

# ================================
# CV and Cover Letter Configuration
# ================================
# Directory where your CV PDF file is stored (relative to backend folder)
CV_DIRECTORY=data/cv
# Name of your CV PDF file
CV_FILENAME=cv.pdf
# Style prompt for cover letter generation
COVER_LETTER_STYLE_PROMPT=Write a professional, engaging cover letter that is concise yet comprehensive. The tone should be confident but not arrogant, enthusiastic but professional. Focus on relevant experience and skills that match the job requirements. Keep it to 3-4 paragraphs maximum. Avoid generic phrases and make it specific to the role.

# ================================
# CORS Configuration
# ================================
CORS_ALLOW_ORIGIN=http://localhost:5173

# ================================
# Security Configuration
# ================================
WEBUI_SECRET_KEY=your-secret-key-change-this-in-production
ENABLE_SIGNUP=true
DEFAULT_USER_ROLE=user

# ================================
# Feature Flags
# ================================
ENABLE_RAG_CHAT=true

# ================================
# Smart Assistant URL
# ================================
SMART_ASSISTANT_URL=http://localhost:8001

# ================================
# LinkedIn Scraping (Bright Data) Configuration
# ================================
# Get these from your Bright Data dashboard
BRIGHT_DATA_USERNAME=your_bright_data_username
BRIGHT_DATA_PASSWORD=your_bright_data_password
BRIGHT_DATA_HOST=brd.superproxy.io
BRIGHT_DATA_PORT=22225
# Your Bright Data Scraping Browser endpoint
BRIGHT_DATA_ENDPOINT=wss://brd-customer-YOUR_CUSTOMER_ID-zone-YOUR_ZONE:YOUR_PASSWORD@brd.superproxy.io:9222

# ================================
# Airtable Configuration
# ================================
# Get your API key from: https://airtable.com/create/tokens
AIRTABLE_API_KEY=your_airtable_api_key_here
# Your Airtable base ID (starts with "app")
AIRTABLE_BASE_ID=your_base_id_here
# Name of your jobs table in Airtable
AIRTABLE_TABLE_NAME=Jobs

# ================================
# Setup Instructions
# ================================
# 1. Install required Python packages:
#    pip install pyairtable aiohttp structlog PyPDF2
#
# 2. Create your Airtable base with the following fields:
#    - title (Single line text)
#    - company (Single line text) 
#    - location (Single line text)
#    - job_type (Single select: Full-time, Part-time, Contract, Freelance)
#    - experience_level (Single select: Entry, Mid, Senior, Executive)
#    - description (Long text)
#    - requirements (Long text)
#    - benefits (Long text)
#    - salary_min (Number)
#    - salary_max (Number)
#    - salary_currency (Single line text)
#    - url (URL)
#    - apply_url (URL)
#    - posted_date (Date)
#    - scraped_at (Date and time)
#    - skills_required (Multiple select or Long text)
#    - industry (Single line text)
#    - department (Single line text)
#    - cover_letter_text (Long text)
#    - cover_letter_generated (Checkbox)
#    - ai_job_score (Number)
#    - ai_skills_match (Long text)
#    - ai_experience_match (Long text)
#
# 3. Upload your CV as a PDF file to backend/data/cv/cv.pdf
#
# 4. Start the backend server:
#    cd backend && python -m app.main
#
# 5. Test the CV system:
#    GET http://localhost:8080/api/smart-assistant/cv/info
#    GET http://localhost:8080/api/smart-assistant/cv/summary
#
# 6. Test job search:
#    Use the /find_jobs command in the frontend chat
